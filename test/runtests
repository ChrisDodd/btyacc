#!/bin/bash

BTYACC=../btyacc
test ${CC:=gcc}

while expr "$1" : - >/dev/null; do
    case $1 in
    -*)
    	echo >&2 "Unknown argument $1"
	;;
    esac
    shift
done

if [ $# -eq 0 ]; then
    set *.y
fi

rm -rf faillog.txt
pass=0
fail=0
for f in "$@"; do
    rv=2
    build=0
    echo "$f:"
    sed -n '/\[test\]/{s/.*\[test\] *//;p}' <$f | while read cmd rest; do
	case $cmd in
	btyacc)
	    if $BTYACC $rest $f >tmp.txt 2>&1; then
		build=1
	    else
		if [ $rv -ne 3 ]; then echo "$f:" >>faillog.txt; fi
		echo "> $BTYACC $rest $f" >> faillog.txt
		cat tmp.txt >>faillog.txt
		rv=3
		build=0
	    fi
	    ;;
	cc)
	    if [ $build -lt 1 ]; then continue; fi
	    if $CC $(basename $f .y).tab.c $rest >tmp.txt 2>&1; then
		build=2
	    else
		if [ $rv -ne 3 ]; then echo "$f:" >>faillog.txt; fi
		echo "> $CC $(basename $f .y).tab.c $rest" >> faillog.txt
		cat tmp.txt >>faillog.txt
		rv=3;
		build=1
	    fi
	    ;;
	input)
	    if [ $build -lt 2 ]; then continue; fi
	    if echo "$rest" | ./a.out >tmp.txt 2>&1; then true; else
		if [ $rv -ne 3 ]; then echo "$f:" >>faillog.txt; fi
		echo "> echo \"$rest\" | ./a.out" >> faillog.txt
		cat tmp.txt >>faillog.txt
		rv=3;
	    fi
	    ;;
	input-fail)
	    if [ $build -lt 2 ]; then continue; fi
	    if echo "$rest" | ./a.out >tmp.txt 2>&1; then
		if [ $rv -ne 3 ]; then echo "$f:" >>faillog.txt; fi
		echo "> echo \"$rest\" | ./a.out" >> faillog.txt
		cat tmp.txt >>faillog.txt
		rv=3;
	    fi
	    ;;
	*)
	    echo >&1 "Unknown testing command $cmd"
	esac;
	bash -c "exit $rv"
    done
    rv=$?
    if [ $rv -eq 130 ]; then
	echo "INTERRUPT"
	break
    elif [ $rv -eq 0 ]; then
	echo "  no commands"
    elif [ $rv -eq 2 ]; then
	echo PASS
	let pass++
    elif [ $rv -eq 3 ]; then
	echo FAIL
	let fail++
    fi
done

if [ $fail -gt 0 ]; then
    echo "$fail tests FAILED, $pass tests PASSED"
else
    echo "$pass tests PASSED"
fi
